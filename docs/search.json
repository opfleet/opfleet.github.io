[
  {
    "objectID": "posts/PenguinsPost/index.html",
    "href": "posts/PenguinsPost/index.html",
    "title": "Classifying Palmer’s Penguins",
    "section": "",
    "text": "In this blog post I am hoping to find features within the given Palmer Penguins data set that will allow a machine learning model to distinguish penguins of different species. The data set, collected by Dr. Kristen Gorman and the Palmer Station in Antarctica, contains physiological measurements from a sample set of penguins that belong to three different species: Chinstrap, Gentoo, and Adelie. At the end of my exploration and model training, I decided to train my model on the following three features: the Island on which the penguin was found, the penguin’s Culmen Length in millimeters, and the penguin’s Culmen Depth in millimeters. Trained on these three features, my linear regression model was able to predict the species of a given penguin in the data set with 100% accuracy.\n\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\n\ntrain_url = \"https://raw.githubusercontent.com/PhilChodrow/ml-notes/main/data/palmer-penguins/train.csv\"\ntrain = pd.read_csv(train_url)\n\n\ntrain.head()\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n0\nPAL0809\n31\nChinstrap penguin (Pygoscelis antarctica)\nAnvers\nDream\nAdult, 1 Egg Stage\nN63A1\nYes\n11/24/08\n40.9\n16.6\n187.0\n3200.0\nFEMALE\n9.08458\n-24.54903\nNaN\n\n\n1\nPAL0809\n41\nChinstrap penguin (Pygoscelis antarctica)\nAnvers\nDream\nAdult, 1 Egg Stage\nN74A1\nYes\n11/24/08\n49.0\n19.5\n210.0\n3950.0\nMALE\n9.53262\n-24.66867\nNaN\n\n\n2\nPAL0708\n4\nGentoo penguin (Pygoscelis papua)\nAnvers\nBiscoe\nAdult, 1 Egg Stage\nN32A2\nYes\n11/27/07\n50.0\n15.2\n218.0\n5700.0\nMALE\n8.25540\n-25.40075\nNaN\n\n\n3\nPAL0708\n15\nGentoo penguin (Pygoscelis papua)\nAnvers\nBiscoe\nAdult, 1 Egg Stage\nN38A1\nYes\n12/3/07\n45.8\n14.6\n210.0\n4200.0\nFEMALE\n7.79958\n-25.62618\nNaN\n\n\n4\nPAL0809\n34\nChinstrap penguin (Pygoscelis antarctica)\nAnvers\nDream\nAdult, 1 Egg Stage\nN65A2\nYes\n11/24/08\n51.0\n18.8\n203.0\n4100.0\nMALE\n9.23196\n-24.17282\nNaN\n\n\n\n\n\n\n\n\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nle.fit(train[\"Species\"])\n\ndef prepare_data(df):\n  df = df.drop([\"studyName\", \"Sample Number\", \"Individual ID\", \"Date Egg\", \"Comments\", \"Region\"], axis = 1)\n  df = df[df[\"Sex\"] != \".\"]\n  df = df.dropna()\n  y = le.transform(df[\"Species\"])\n  df = df.drop([\"Species\"], axis = 1)\n  df = pd.get_dummies(df)\n  return df, y\n\nX_train, y_train = prepare_data(train)\n\n\nX_train.head(20)\n\n\n\n\n\n\n\n\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nIsland_Biscoe\nIsland_Dream\nIsland_Torgersen\nStage_Adult, 1 Egg Stage\nClutch Completion_No\nClutch Completion_Yes\nSex_FEMALE\nSex_MALE\n\n\n\n\n0\n40.9\n16.6\n187.0\n3200.0\n9.08458\n-24.54903\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nTrue\nFalse\n\n\n1\n49.0\n19.5\n210.0\n3950.0\n9.53262\n-24.66867\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n2\n50.0\n15.2\n218.0\n5700.0\n8.25540\n-25.40075\nTrue\nFalse\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n3\n45.8\n14.6\n210.0\n4200.0\n7.79958\n-25.62618\nTrue\nFalse\nFalse\nTrue\nFalse\nTrue\nTrue\nFalse\n\n\n4\n51.0\n18.8\n203.0\n4100.0\n9.23196\n-24.17282\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n5\n41.1\n18.2\n192.0\n4050.0\n8.62264\n-26.60023\nTrue\nFalse\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n7\n34.6\n21.1\n198.0\n4400.0\n8.55583\n-25.22588\nFalse\nFalse\nTrue\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n8\n52.8\n20.0\n205.0\n4550.0\n9.25177\n-24.69638\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n11\n47.2\n15.5\n215.0\n4975.0\n8.30817\n-26.21651\nTrue\nFalse\nFalse\nTrue\nFalse\nTrue\nTrue\nFalse\n\n\n13\n46.1\n18.2\n178.0\n3250.0\n8.85664\n-24.55644\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nTrue\nFalse\n\n\n14\n34.0\n17.1\n185.0\n3400.0\n8.01485\n-26.69543\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nTrue\nFalse\n\n\n15\n49.7\n18.6\n195.0\n3600.0\n9.75486\n-24.31198\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n16\n41.1\n17.5\n190.0\n3900.0\n8.94365\n-26.06943\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n17\n58.0\n17.8\n181.0\n3700.0\n9.14382\n-24.57994\nFalse\nTrue\nFalse\nTrue\nTrue\nFalse\nTrue\nFalse\n\n\n18\n46.9\n16.6\n192.0\n2700.0\n9.80589\n-24.73735\nFalse\nTrue\nFalse\nTrue\nTrue\nFalse\nTrue\nFalse\n\n\n19\n45.7\n13.9\n214.0\n4400.0\n8.62870\n-26.60484\nTrue\nFalse\nFalse\nTrue\nFalse\nTrue\nTrue\nFalse\n\n\n20\n42.1\n19.1\n195.0\n4000.0\n9.05736\n-25.81513\nFalse\nFalse\nTrue\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n23\n49.1\n14.8\n220.0\n5150.0\n7.89744\n-26.63405\nTrue\nFalse\nFalse\nTrue\nFalse\nTrue\nTrue\nFalse\n\n\n24\n48.1\n15.1\n209.0\n5500.0\n8.45738\n-26.22664\nTrue\nFalse\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n25\n42.9\n13.1\n215.0\n5000.0\n7.68528\n-25.39181\nTrue\nFalse\nFalse\nTrue\nFalse\nTrue\nTrue\nFalse"
  },
  {
    "objectID": "posts/PenguinsPost/index.html#abstract",
    "href": "posts/PenguinsPost/index.html#abstract",
    "title": "Classifying Palmer’s Penguins",
    "section": "",
    "text": "In this blog post I am hoping to find features within the given Palmer Penguins data set that will allow a machine learning model to distinguish penguins of different species. The data set, collected by Dr. Kristen Gorman and the Palmer Station in Antarctica, contains physiological measurements from a sample set of penguins that belong to three different species: Chinstrap, Gentoo, and Adelie. At the end of my exploration and model training, I decided to train my model on the following three features: the Island on which the penguin was found, the penguin’s Culmen Length in millimeters, and the penguin’s Culmen Depth in millimeters. Trained on these three features, my linear regression model was able to predict the species of a given penguin in the data set with 100% accuracy.\n\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\n\ntrain_url = \"https://raw.githubusercontent.com/PhilChodrow/ml-notes/main/data/palmer-penguins/train.csv\"\ntrain = pd.read_csv(train_url)\n\n\ntrain.head()\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n0\nPAL0809\n31\nChinstrap penguin (Pygoscelis antarctica)\nAnvers\nDream\nAdult, 1 Egg Stage\nN63A1\nYes\n11/24/08\n40.9\n16.6\n187.0\n3200.0\nFEMALE\n9.08458\n-24.54903\nNaN\n\n\n1\nPAL0809\n41\nChinstrap penguin (Pygoscelis antarctica)\nAnvers\nDream\nAdult, 1 Egg Stage\nN74A1\nYes\n11/24/08\n49.0\n19.5\n210.0\n3950.0\nMALE\n9.53262\n-24.66867\nNaN\n\n\n2\nPAL0708\n4\nGentoo penguin (Pygoscelis papua)\nAnvers\nBiscoe\nAdult, 1 Egg Stage\nN32A2\nYes\n11/27/07\n50.0\n15.2\n218.0\n5700.0\nMALE\n8.25540\n-25.40075\nNaN\n\n\n3\nPAL0708\n15\nGentoo penguin (Pygoscelis papua)\nAnvers\nBiscoe\nAdult, 1 Egg Stage\nN38A1\nYes\n12/3/07\n45.8\n14.6\n210.0\n4200.0\nFEMALE\n7.79958\n-25.62618\nNaN\n\n\n4\nPAL0809\n34\nChinstrap penguin (Pygoscelis antarctica)\nAnvers\nDream\nAdult, 1 Egg Stage\nN65A2\nYes\n11/24/08\n51.0\n18.8\n203.0\n4100.0\nMALE\n9.23196\n-24.17282\nNaN\n\n\n\n\n\n\n\n\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nle.fit(train[\"Species\"])\n\ndef prepare_data(df):\n  df = df.drop([\"studyName\", \"Sample Number\", \"Individual ID\", \"Date Egg\", \"Comments\", \"Region\"], axis = 1)\n  df = df[df[\"Sex\"] != \".\"]\n  df = df.dropna()\n  y = le.transform(df[\"Species\"])\n  df = df.drop([\"Species\"], axis = 1)\n  df = pd.get_dummies(df)\n  return df, y\n\nX_train, y_train = prepare_data(train)\n\n\nX_train.head(20)\n\n\n\n\n\n\n\n\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nIsland_Biscoe\nIsland_Dream\nIsland_Torgersen\nStage_Adult, 1 Egg Stage\nClutch Completion_No\nClutch Completion_Yes\nSex_FEMALE\nSex_MALE\n\n\n\n\n0\n40.9\n16.6\n187.0\n3200.0\n9.08458\n-24.54903\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nTrue\nFalse\n\n\n1\n49.0\n19.5\n210.0\n3950.0\n9.53262\n-24.66867\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n2\n50.0\n15.2\n218.0\n5700.0\n8.25540\n-25.40075\nTrue\nFalse\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n3\n45.8\n14.6\n210.0\n4200.0\n7.79958\n-25.62618\nTrue\nFalse\nFalse\nTrue\nFalse\nTrue\nTrue\nFalse\n\n\n4\n51.0\n18.8\n203.0\n4100.0\n9.23196\n-24.17282\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n5\n41.1\n18.2\n192.0\n4050.0\n8.62264\n-26.60023\nTrue\nFalse\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n7\n34.6\n21.1\n198.0\n4400.0\n8.55583\n-25.22588\nFalse\nFalse\nTrue\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n8\n52.8\n20.0\n205.0\n4550.0\n9.25177\n-24.69638\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n11\n47.2\n15.5\n215.0\n4975.0\n8.30817\n-26.21651\nTrue\nFalse\nFalse\nTrue\nFalse\nTrue\nTrue\nFalse\n\n\n13\n46.1\n18.2\n178.0\n3250.0\n8.85664\n-24.55644\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nTrue\nFalse\n\n\n14\n34.0\n17.1\n185.0\n3400.0\n8.01485\n-26.69543\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nTrue\nFalse\n\n\n15\n49.7\n18.6\n195.0\n3600.0\n9.75486\n-24.31198\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n16\n41.1\n17.5\n190.0\n3900.0\n8.94365\n-26.06943\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n17\n58.0\n17.8\n181.0\n3700.0\n9.14382\n-24.57994\nFalse\nTrue\nFalse\nTrue\nTrue\nFalse\nTrue\nFalse\n\n\n18\n46.9\n16.6\n192.0\n2700.0\n9.80589\n-24.73735\nFalse\nTrue\nFalse\nTrue\nTrue\nFalse\nTrue\nFalse\n\n\n19\n45.7\n13.9\n214.0\n4400.0\n8.62870\n-26.60484\nTrue\nFalse\nFalse\nTrue\nFalse\nTrue\nTrue\nFalse\n\n\n20\n42.1\n19.1\n195.0\n4000.0\n9.05736\n-25.81513\nFalse\nFalse\nTrue\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n23\n49.1\n14.8\n220.0\n5150.0\n7.89744\n-26.63405\nTrue\nFalse\nFalse\nTrue\nFalse\nTrue\nTrue\nFalse\n\n\n24\n48.1\n15.1\n209.0\n5500.0\n8.45738\n-26.22664\nTrue\nFalse\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\n\n\n25\n42.9\n13.1\n215.0\n5000.0\n7.68528\n-25.39181\nTrue\nFalse\nFalse\nTrue\nFalse\nTrue\nTrue\nFalse"
  },
  {
    "objectID": "posts/PenguinsPost/index.html#explore",
    "href": "posts/PenguinsPost/index.html#explore",
    "title": "Classifying Palmer’s Penguins",
    "section": "Explore:",
    "text": "Explore:\nConstruct at least two interesting displayed figure (e.g. using seaborn) and at least one interesting displayed summary table (e.g. using pandas.groupby().aggregate). Make sure to include a helpful discussion of both the figure and the table. Don’t just show the result: explain what you learned about the data from these products.\n\nplot1 = sns.scatterplot(data = X_train, x = 'Culmen Length (mm)', \n    y = 'Culmen Depth (mm)', hue = y_train, \n    style = y_train, palette = \"dark\")\nplot1.set_title(\"Culmen Depth vs. Culmen Length\")\nplot1.legend(title = \"Species\")\n\n\n\n\n\n\n\n\nThis scatterplot seems to indicate a heavy correlation between a penguin’s culmen depth and length, and the penguin’s species classification. One species seems to have short and moderately deep culmens (Species 0), another has moderately long and deep culmens (Species 1), and the last species has moderately long and shallow culmens (Species 2).\n\nplot2 = sns.scatterplot(\n    data = X_train, x = 'Culmen Depth (mm)', \n    y = 'Flipper Length (mm)', hue = y_train, \n    style = y_train, palette = \"dark\")\nplot2.set_title(\"Flipper Length vs. Culmen Depth\")\nplot2.legend(title = \"Species\")\nplot2\n\n\n\n\n\n\n\n\nPursuing the lead from the last scatter plot, I decided to plot culmen depth against flipper length, which I predicted would be species-specific, in that it is likely that different species vary noticeably in flipper length. As we saw in the last plot, Species 0 and 1 have similar culmen depths. Additionally, they also seem to have similar flipper lengths, and are therefore very closely plotted in this comparison. However, Species 2 is distinct from the other species by both flipper length and culmen depth, and are thus greatly removed from the other groups in the top left corner of this plot. This points to the fact that Species 2 generally has longer flippers and shallower culmens than the other species, so much so, that they are easily separable in this comparison.\n\nplot3 = sns.boxplot(\n        data = X_train, x = y_train, \n        y = 'Culmen Length (mm)')\nplot3.set_xlabel(\"Species\")\nplot3.set_title(\"Culmen Length Distribution Across Species\")\nplot3\n\n\n\n\n\n\n\n\nReturning to the culmen length variable, we can plot its distribution across species. We can see that this variable generally distinguishes Species 0 from the other two species, in that Species 0 has a shorter culmen than both other species, which have similar culmen lengths. This points to the idea that culmen length is a good feature to use to distinguish penguins of Species 0.\n\nrow1 = X_train.query(\"Island_Biscoe == True\").mean()\nrow2 = X_train.query(\"Island_Dream == True\").mean()\nrow3 = X_train.query(\"Island_Torgersen == True\").mean()\ntable1 = pd.DataFrame([row1, row2, row3])\ntable1\n\n\n\n\n\n\n\n\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nIsland_Biscoe\nIsland_Dream\nIsland_Torgersen\nStage_Adult, 1 Egg Stage\nClutch Completion_No\nClutch Completion_Yes\nSex_FEMALE\nSex_MALE\n\n\n\n\n0\n44.945600\n15.863200\n209.320000\n4702.000000\n8.394096\n-26.086192\n1.0\n0.0\n0.0\n1.0\n0.072000\n0.928000\n0.520000\n0.480000\n\n\n1\n44.527835\n18.307216\n193.628866\n3734.793814\n9.163175\n-25.075329\n0.0\n1.0\n0.0\n1.0\n0.123711\n0.876289\n0.525773\n0.474227\n\n\n2\n39.350000\n18.441176\n192.235294\n3727.941176\n8.844635\n-25.748135\n0.0\n0.0\n1.0\n1.0\n0.205882\n0.794118\n0.470588\n0.529412\n\n\n\n\n\n\n\nFinally, here is a summary table that groups penguins by their island, and analyzes the average quantitative features of the penguin whose data were collected on the different islands. On takeaway is that the penguins found on Island Torgersen have shorter culmens than those on the other islands. Another is that the penguins on Island Boscoe have shallower culmens than those found on the other islands. Additionally, penguins on Island Boscoe are larger (with greater flipper length and body mass). Through these comparisons, it looks like the island on which a penguin is found can be a good indicator of what species the penguin may be. This is because there seems to be a greater concentration of feature variance across islands, i.e. Boscoe has larger penguins with shallow culmens, and Torgersen has penguins with longer culmens. I predict that the best features to distinguish penguins will be Culmen Length, Culmen Depth, Island, and Flipper Length/Body Mass."
  },
  {
    "objectID": "posts/PenguinsPost/index.html#model",
    "href": "posts/PenguinsPost/index.html#model",
    "title": "Classifying Palmer’s Penguins",
    "section": "Model:",
    "text": "Model:\nFind three features of the data and a model trained on those features which achieves 100% testing accuracy. You must obtain your three features through a reproducible process. That is, you can’t just pick them: you need to code up some kind of search in order to obtain them. - One feature must be qualitative (like Island or Clutch Completion). - The other two features must be quantitative (like Body Mass (g) or Culmen Depth (mm)).\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC # support vector classifier\nfrom mlxtend.plotting import plot_decision_regions # for visualization later\nfrom sklearn.model_selection import cross_val_score\n\n\nfrom itertools import combinations\n\n# these are not actually all the columns: you'll \n# need to add any of the other ones you want to search for\nall_qual_cols = [\"Clutch Completion\", \"Island\"]\nall_quant_cols = ['Culmen Length (mm)', 'Culmen Depth (mm)', 'Flipper Length (mm)', 'Body Mass (g)', 'Delta 15 N (o/oo)', 'Delta 13 C (o/oo)']\nLR = LogisticRegression(max_iter=10000)\n\nfeature_comparison = pd.DataFrame(columns=['Features', 'Accuracy'])\n\nfor qual in all_qual_cols: \n  qual_cols = [col for col in X_train.columns if qual in col ]\n  for pair in combinations(all_quant_cols, 2):\n    cols = qual_cols + list(pair) \n    LR.fit(X_train[cols], y_train)\n    avg_score = np.mean(cross_val_score(LR, X_train[cols], y_train, cv = 5))\n    \n    # I'm trying to put all results into a table, and then sort by score\n    feature_comparison.loc[len(feature_comparison)] = {'Features' : cols, 'Accuracy' : avg_score}\n\n\nbest_features = feature_comparison.sort_values('Accuracy', ascending = False).head(5)\nbest_features\n\n\n\n\n\n\n\n\nFeatures\nAccuracy\n\n\n\n\n15\n[Island_Biscoe, Island_Dream, Island_Torgersen...\n0.988311\n\n\n26\n[Island_Biscoe, Island_Dream, Island_Torgersen...\n0.968778\n\n\n17\n[Island_Biscoe, Island_Dream, Island_Torgersen...\n0.968627\n\n\n19\n[Island_Biscoe, Island_Dream, Island_Torgersen...\n0.964932\n\n\n16\n[Island_Biscoe, Island_Dream, Island_Torgersen...\n0.964857\n\n\n\n\n\n\n\n\nbest_features['Features'].iloc[0]\n\n['Island_Biscoe',\n 'Island_Dream',\n 'Island_Torgersen',\n 'Culmen Length (mm)',\n 'Culmen Depth (mm)']\n\n\n\nfit_cols = ['Culmen Length (mm)', 'Culmen Depth (mm)', 'Island_Biscoe', \n            'Island_Dream', 'Island_Torgersen']\n\n\nLR.fit(X_train[fit_cols], y_train)\nLR.score(X_train[fit_cols], y_train)\n\n0.99609375"
  },
  {
    "objectID": "posts/PenguinsPost/index.html#evaluate",
    "href": "posts/PenguinsPost/index.html#evaluate",
    "title": "Classifying Palmer’s Penguins",
    "section": "Evaluate:",
    "text": "Evaluate:\nShow the decision regions of your finished model, split out by the qualitative feature.\n\ntest_url = \"https://raw.githubusercontent.com/PhilChodrow/ml-notes/main/data/palmer-penguins/test.csv\"\ntest = pd.read_csv(test_url)\n\nX_test, y_test = prepare_data(test)\nLR.score(X_test[fit_cols], y_test)\n\n1.0\n\n\n\nfrom matplotlib.patches import Patch\nfrom matplotlib import pyplot as plt\n\ndef plot_regions(model, X, y):\n    \n    x0 = X[X.columns[0]]\n    x1 = X[X.columns[1]]\n    qual_features = X.columns[2:]\n    \n    fig, axarr = plt.subplots(1, len(qual_features), figsize = (7, 3))\n\n    # create a grid\n    grid_x = np.linspace(x0.min(),x0.max(),501)\n    grid_y = np.linspace(x1.min(),x1.max(),501)\n    xx, yy = np.meshgrid(grid_x, grid_y)\n    \n    XX = xx.ravel()\n    YY = yy.ravel()\n\n    for i in range(len(qual_features)):\n      XY = pd.DataFrame({\n          X.columns[0] : XX,\n          X.columns[1] : YY\n      })\n\n      for j in qual_features:\n        XY[j] = 0\n\n      XY[qual_features[i]] = 1\n\n      p = model.predict(XY)\n      p = p.reshape(xx.shape)\n      \n      \n      # use contour plot to visualize the predictions\n      axarr[i].contourf(xx, yy, p, cmap = \"jet\", alpha = 0.2, vmin = 0, vmax = 2)\n      \n      ix = X[qual_features[i]] == 1\n      # plot the data\n      axarr[i].scatter(x0[ix], x1[ix], c = y[ix], cmap = \"jet\", vmin = 0, vmax = 2)\n      \n      axarr[i].set(xlabel = X.columns[0], \n            ylabel  = X.columns[1], \n            title = qual_features[i])\n      \n      patches = []\n      for color, spec in zip([\"red\", \"green\", \"blue\"], [\"Adelie\", \"Chinstrap\", \"Gentoo\"]):\n        patches.append(Patch(color = color, label = spec))\n\n      plt.legend(title = \"Species\", handles = patches, loc = \"best\")\n      \n      plt.tight_layout()\n\n\nplot_regions(LR, X_train[fit_cols], y_train)\n\n\n\n\n\n\n\n\n\nfrom sklearn.metrics import confusion_matrix\ny_test_pred = LR.predict(X_test[fit_cols])\n\nC = confusion_matrix(y_test, y_test_pred)\nC\n\narray([[31,  0,  0],\n       [ 0, 11,  0],\n       [ 0,  0, 26]], dtype=int64)\n\n\nAccording to the confusion matrix, my model seems to have performed perfectly on the testing data, and produced no errors in the classification."
  },
  {
    "objectID": "posts/PenguinsPost/index.html#discussion",
    "href": "posts/PenguinsPost/index.html#discussion",
    "title": "Classifying Palmer’s Penguins",
    "section": "Discussion",
    "text": "Discussion\nI performed cross validation on logistic regression models trained on every combination of 3 qualitative/quantitative features found within the Palmer’s Penguins data set. The model that performed the best (to 99.6% accuracy) was trained on the features: Island, Culmen Length, and Culmen Depth. I think that if I were to explore this assignment further, I would like to experiment with other classification models, to see if there are ways to classify this data set with comparable accuracy, but using fewer features."
  },
  {
    "objectID": "posts/new-new-test-post/index.html",
    "href": "posts/new-new-test-post/index.html",
    "title": "Timnit Gebru",
    "section": "",
    "text": "from source import Perceptron\np = Perceptron()\n\nI did it!!\nnot implemented\nThis is an example of the blog posts that you’ll submit as your primary form of learning demonstration in CSCI 0451. I created this post by modifying the file posts/example-blog-post/index.ipynb in VSCode. You can also use JupyterLab for this editing if you prefer. Finally, it is possible to write blog posts without using notebooks by writing .qmd files, as illustrated here."
  },
  {
    "objectID": "posts/new-new-test-post/index.html#math",
    "href": "posts/new-new-test-post/index.html#math",
    "title": "Timnit Gebru",
    "section": "Math",
    "text": "Math\nIn addition to regular text using the Markdown specification, you can also write mathematics, enclosed between dollar signs. The syntax for writing math is very similar to the syntax used in the \\(\\LaTeX\\) markup language. For example, $f(x) \\approx y$ renders to \\(f(x) \\approx y\\). To place complex mathematical expressions on their own lines, use double dollar signs. For example, the expression\n$$\\mathcal{L}(a, b) = \\sum_{i = 1}^n (ax_i + b - y_i)^2$$\nrenders to:\n\\[\\mathcal{L}(a, b) = \\sum_{i = 1}^n (ax_i + b - y_i)^2\\;.\\]\nBehind the scenes, math is powered by the MathJax engine. For more on how to write math, check this handy tutorial and quick reference."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Awesome CSCI 0451 Blog",
    "section": "",
    "text": "Classifying Palmer’s Penguins\n\n\n\n\n\nMy Blog Post for Homework 1: Classifying Palmer’s Penguins\n\n\n\n\n\nFeb 21, 2024\n\n\nOscar Fleet\n\n\n\n\n\n\n\n\n\n\n\n\nTimnit Gebru\n\n\n\n\n\nA new blog post that I just made!\n\n\n\n\n\nMar 10, 2023\n\n\nPhil Chodrow\n\n\n\n\n\n\n\n\n\n\n\n\nSecond Post\n\n\n\n\n\nA new blog post that I just made!\n\n\n\n\n\nMar 10, 2023\n\n\nPhil Chodrow\n\n\n\n\n\n\n\n\n\n\n\n\nHello Blog\n\n\n\n\n\nAn example blog post illustrating the key techniques you’ll need to demonstrate your learning in CSCI 0451.\n\n\n\n\n\nJan 10, 2023\n\n\nPhil Chodrow\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Oscar",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/example-blog-post/index.html",
    "href": "posts/example-blog-post/index.html",
    "title": "Hello Blog",
    "section": "",
    "text": "from source import Perceptron\nThis is an example of the blog posts that you’ll submit as your primary form of learning demonstration in CSCI 0451. I created this post by modifying the file posts/example-blog-post/index.ipynb in VSCode. You can also use JupyterLab for this editing if you prefer. Finally, it is possible to write blog posts without using notebooks by writing .qmd files, as illustrated here."
  },
  {
    "objectID": "posts/example-blog-post/index.html#math",
    "href": "posts/example-blog-post/index.html#math",
    "title": "Hello Blog",
    "section": "Math",
    "text": "Math\nIn addition to regular text using the Markdown specification, you can also write mathematics, enclosed between dollar signs. The syntax for writing math is very similar to the syntax used in the \\(\\LaTeX\\) markup language. For example, $f(x) \\approx y$ renders to \\(f(x) \\approx y\\). To place complex mathematical expressions on their own lines, use double dollar signs. For example, the expression\n$$\\mathcal{L}(a, b) = \\sum_{i = 1}^n (ax_i + b - y_i)^2$$\nrenders to:\n\\[\\mathcal{L}(a, b) = \\sum_{i = 1}^n (ax_i + b - y_i)^2\\;.\\]\nBehind the scenes, math is powered by the MathJax engine. For more on how to write math, check this handy tutorial and quick reference."
  },
  {
    "objectID": "posts/new-test-post/index.html",
    "href": "posts/new-test-post/index.html",
    "title": "Second Post",
    "section": "",
    "text": "This is an example of the blog posts that you’ll submit as your primary form of learning demonstration in CSCI 0451. I created this post by modifying the file posts/example-blog-post/index.ipynb in VSCode. You can also use JupyterLab for this editing if you prefer. Finally, it is possible to write blog posts without using notebooks by writing .qmd files, as illustrated here."
  },
  {
    "objectID": "posts/new-test-post/index.html#math",
    "href": "posts/new-test-post/index.html#math",
    "title": "Second Post",
    "section": "Math",
    "text": "Math\nIn addition to regular text using the Markdown specification, you can also write mathematics, enclosed between dollar signs. The syntax for writing math is very similar to the syntax used in the \\(\\LaTeX\\) markup language. For example, $f(x) \\approx y$ renders to \\(f(x) \\approx y\\). To place complex mathematical expressions on their own lines, use double dollar signs. For example, the expression\n$$\\mathcal{L}(a, b) = \\sum_{i = 1}^n (ax_i + b - y_i)^2$$\nrenders to:\n\\[\\mathcal{L}(a, b) = \\sum_{i = 1}^n (ax_i + b - y_i)^2\\;.\\]\nBehind the scenes, math is powered by the MathJax engine. For more on how to write math, check this handy tutorial and quick reference."
  }
]